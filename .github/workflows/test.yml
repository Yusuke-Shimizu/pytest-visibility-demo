name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-github-actions-annotate-failures
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
    
    - name: Run pytest and generate report
      run: |
        pytest --junitxml=pytest-report.xml --tb=short --color=yes -v --durations=10
    
    - name: Display test summary
      if: always()
      run: |
        echo "## Test Results Summary (Python ${{ matrix.python-version }})" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f pytest-report.xml ]; then
          echo "✅ JUnit XML report generated successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Parse JUnit XML and create table
          echo "### Test Results Table" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Name | Status | Time (s) | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|----------|---------|" >> $GITHUB_STEP_SUMMARY
          
          # Extract test results from XML using Python
          python3 << 'EOF' >> $GITHUB_STEP_SUMMARY
import xml.etree.ElementTree as ET
import os

try:
    tree = ET.parse('pytest-report.xml')
    root = tree.getroot()
    
    for testcase in root.findall('.//testcase'):
        name = testcase.get('name', 'Unknown')
        classname = testcase.get('classname', '')
        time = testcase.get('time', '0')
        
        # Shorten the test name for better display
        display_name = name.replace('test_', '').replace('_', ' ').title()
        
        # Check for failures or errors
        failure = testcase.find('failure')
        error = testcase.find('error')
        skipped = testcase.find('skipped')
        
        if failure is not None:
            status = "❌ FAIL"
            details = failure.get('message', 'Failed')[:50] + "..."
        elif error is not None:
            status = "💥 ERROR"
            details = error.get('message', 'Error')[:50] + "..."
        elif skipped is not None:
            status = "⏭️ SKIP"
            details = skipped.get('message', 'Skipped')[:50] + "..."
        else:
            status = "✅ PASS"
            details = "Success"
        
        print(f"| {display_name} | {status} | {float(time):.3f} | {details} |")
        
    # Summary statistics
    total = len(root.findall('.//testcase'))
    failures = len(root.findall('.//failure'))
    errors = len(root.findall('.//error'))
    skipped = len(root.findall('.//skipped'))
    passed = total - failures - errors - skipped
    
    print("")
    print("### Summary Statistics")
    print("")
    print(f"| Metric | Count |")
    print(f"|--------|-------|")
    print(f"| Total Tests | {total} |")
    print(f"| ✅ Passed | {passed} |")
    print(f"| ❌ Failed | {failures} |")
    print(f"| 💥 Errors | {errors} |")
    print(f"| ⏭️ Skipped | {skipped} |")
    
except Exception as e:
    print(f"Error parsing XML: {e}")
EOF
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 Detailed report available in artifacts" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ JUnit XML report not found" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Upload test report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: pytest-report-python-${{ matrix.python-version }}
        path: pytest-report.xml 
    - name: Notify Slack on failure
      if: failure() && github.event_name == 'push'
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_CHANNEL: 'ci-notifications'
        SLACK_COLOR: danger
        SLACK_MESSAGE: |
          テストが失敗しました 🚨
          ブランチ: ${{ github.ref_name }}
          コミット: ${{ github.sha }}
          詳細: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        SLACK_TITLE: pytest 失敗通知
        SLACK_USERNAME: GitHub Actions